{"$message_type":"diagnostic","message":"cannot find function `serialize` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"rust/src/main.rs","byte_start":8619,"byte_end":8628,"line_start":302,"line_end":302,"column_start":45,"column_end":54,"is_primary":true,"text":[{"text":"        let block_hash = Sha256dHash::hash(&serialize(&block_header)).to_string();","highlight_start":45,"highlight_end":54}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing one of these items","code":null,"level":"help","spans":[{"file_name":"rust/src/main.rs","byte_start":89,"byte_end":89,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use bitcoin::{","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use bitcoin::amount::serde::as_btc::opt::serialize;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"rust/src/main.rs","byte_start":89,"byte_end":89,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use bitcoin::{","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use bitcoin::amount::serde::as_btc::serialize;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"rust/src/main.rs","byte_start":89,"byte_end":89,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use bitcoin::{","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use bitcoin::amount::serde::as_sat::opt::serialize;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"rust/src/main.rs","byte_start":89,"byte_end":89,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use bitcoin::{","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use bitcoin::amount::serde::as_sat::serialize;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"rust/src/main.rs","byte_start":89,"byte_end":89,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use bitcoin::{","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use bitcoin::consensus::serialize;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"rust/src/main.rs","byte_start":89,"byte_end":89,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use bitcoin::{","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use bitcoin::network::as_core_arg::serialize;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function `serialize` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mrust/src/main.rs:302:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m302\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let block_hash = Sha256dHash::hash(&serialize(&block_header)).to_string();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these items\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use bitcoin::amount::serde::as_btc::opt::serialize;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use bitcoin::amount::serde::as_btc::serialize;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use bitcoin::amount::serde::as_sat::opt::serialize;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use bitcoin::amount::serde::as_sat::serialize;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m      and 2 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `Address`, `Amount`, `Script`, `Sequence`, `TxIn`, `TxOut`, `Witness`, `absolute::LockTime`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"rust/src/main.rs","byte_start":108,"byte_end":126,"line_start":4,"line_end":4,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"    absolute::LockTime, Address, Amount, Script, Sequence, TxIn, TxOut, Witness,","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"rust/src/main.rs","byte_start":128,"byte_end":135,"line_start":4,"line_end":4,"column_start":25,"column_end":32,"is_primary":true,"text":[{"text":"    absolute::LockTime, Address, Amount, Script, Sequence, TxIn, TxOut, Witness,","highlight_start":25,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"rust/src/main.rs","byte_start":137,"byte_end":143,"line_start":4,"line_end":4,"column_start":34,"column_end":40,"is_primary":true,"text":[{"text":"    absolute::LockTime, Address, Amount, Script, Sequence, TxIn, TxOut, Witness,","highlight_start":34,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"rust/src/main.rs","byte_start":145,"byte_end":151,"line_start":4,"line_end":4,"column_start":42,"column_end":48,"is_primary":true,"text":[{"text":"    absolute::LockTime, Address, Amount, Script, Sequence, TxIn, TxOut, Witness,","highlight_start":42,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"rust/src/main.rs","byte_start":153,"byte_end":161,"line_start":4,"line_end":4,"column_start":50,"column_end":58,"is_primary":true,"text":[{"text":"    absolute::LockTime, Address, Amount, Script, Sequence, TxIn, TxOut, Witness,","highlight_start":50,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"rust/src/main.rs","byte_start":163,"byte_end":167,"line_start":4,"line_end":4,"column_start":60,"column_end":64,"is_primary":true,"text":[{"text":"    absolute::LockTime, Address, Amount, Script, Sequence, TxIn, TxOut, Witness,","highlight_start":60,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"rust/src/main.rs","byte_start":169,"byte_end":174,"line_start":4,"line_end":4,"column_start":66,"column_end":71,"is_primary":true,"text":[{"text":"    absolute::LockTime, Address, Amount, Script, Sequence, TxIn, TxOut, Witness,","highlight_start":66,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"rust/src/main.rs","byte_start":176,"byte_end":183,"line_start":4,"line_end":4,"column_start":73,"column_end":80,"is_primary":true,"text":[{"text":"    absolute::LockTime, Address, Amount, Script, Sequence, TxIn, TxOut, Witness,","highlight_start":73,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"rust/src/main.rs","byte_start":89,"byte_end":188,"line_start":3,"line_end":6,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use bitcoin::{","highlight_start":1,"highlight_end":15},{"text":"    absolute::LockTime, Address, Amount, Script, Sequence, TxIn, TxOut, Witness,","highlight_start":1,"highlight_end":81},{"text":"};","highlight_start":1,"highlight_end":3},{"text":"use serde::{Deserialize, Serialize};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `Address`, `Amount`, `Script`, `Sequence`, `TxIn`, `TxOut`, `Witness`, `absolute::LockTime`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mrust/src/main.rs:4:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    absolute::LockTime, Address, Amount, Script, Sequence, TxIn, TxOut, Witness,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of undeclared type `Sha256dHash`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"rust/src/main.rs","byte_start":8600,"byte_end":8611,"line_start":302,"line_end":302,"column_start":26,"column_end":37,"is_primary":true,"text":[{"text":"        let block_hash = Sha256dHash::hash(&serialize(&block_header)).to_string();","highlight_start":26,"highlight_end":37}],"label":"use of undeclared type `Sha256dHash`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `Sha256dHash`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mrust/src/main.rs:302:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m302\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let block_hash = Sha256dHash::hash(&serialize(&block_header)).to_string();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared type `Sha256dHash`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `prev_blockhash`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"rust/src/main.rs","byte_start":3409,"byte_end":3423,"line_start":138,"line_end":138,"column_start":9,"column_end":23,"is_primary":true,"text":[{"text":"    let prev_blockhash = \"0000abcd00000000000000000000000000000000000000000000000000000000\".to_string(); // some dummy hash, can be anything less than the difficulty","highlight_start":9,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"rust/src/main.rs","byte_start":3409,"byte_end":3423,"line_start":138,"line_end":138,"column_start":9,"column_end":23,"is_primary":true,"text":[{"text":"    let prev_blockhash = \"0000abcd00000000000000000000000000000000000000000000000000000000\".to_string(); // some dummy hash, can be anything less than the difficulty","highlight_start":9,"highlight_end":23}],"label":null,"suggested_replacement":"_prev_blockhash","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `prev_blockhash`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mrust/src/main.rs:138:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let prev_blockhash = \"0000abcd00000000000000000000000000000000000000000000000000000000\".to_string(); // some dummy hash, can be anyth\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_prev_blockhash`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `difficulty_target`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"rust/src/main.rs","byte_start":3575,"byte_end":3592,"line_start":139,"line_end":139,"column_start":9,"column_end":26,"is_primary":true,"text":[{"text":"    let difficulty_target = \"0000ffff00000000000000000000000000000000000000000000000000000000\".to_string(); ","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"rust/src/main.rs","byte_start":3575,"byte_end":3592,"line_start":139,"line_end":139,"column_start":9,"column_end":26,"is_primary":true,"text":[{"text":"    let difficulty_target = \"0000ffff00000000000000000000000000000000000000000000000000000000\".to_string(); ","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":"_difficulty_target","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `difficulty_target`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mrust/src/main.rs:139:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let difficulty_target = \"0000ffff00000000000000000000000000000000000000000000000000000000\".to_string(); \u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_difficulty_target`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `coinbase_transaction`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"rust/src/main.rs","byte_start":3734,"byte_end":3754,"line_start":143,"line_end":143,"column_start":9,"column_end":29,"is_primary":true,"text":[{"text":"    let coinbase_transaction = create_coinbase_transaction(reward, reward_address);","highlight_start":9,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"rust/src/main.rs","byte_start":3734,"byte_end":3754,"line_start":143,"line_end":143,"column_start":9,"column_end":29,"is_primary":true,"text":[{"text":"    let coinbase_transaction = create_coinbase_transaction(reward, reward_address);","highlight_start":9,"highlight_end":29}],"label":null,"suggested_replacement":"_coinbase_transaction","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `coinbase_transaction`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mrust/src/main.rs:143:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m143\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let coinbase_transaction = create_coinbase_transaction(reward, reward_address);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_coinbase_transaction`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `compile_txs_to_fit_into_a_block`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"rust/src/main.rs","byte_start":3820,"byte_end":3851,"line_start":145,"line_end":145,"column_start":10,"column_end":41,"is_primary":true,"text":[{"text":"    let (compile_txs_to_fit_into_a_block, fees) = compile_txs_and_fees_from_the_mempool(transactions);","highlight_start":10,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"rust/src/main.rs","byte_start":3820,"byte_end":3851,"line_start":145,"line_end":145,"column_start":10,"column_end":41,"is_primary":true,"text":[{"text":"    let (compile_txs_to_fit_into_a_block, fees) = compile_txs_and_fees_from_the_mempool(transactions);","highlight_start":10,"highlight_end":41}],"label":null,"suggested_replacement":"_compile_txs_to_fit_into_a_block","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `compile_txs_to_fit_into_a_block`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mrust/src/main.rs:145:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let (compile_txs_to_fit_into_a_block, fees) = compile_txs_and_fees_from_the_mempool(transactions);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_compile_txs_to_fit_into_a_block`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `fees`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"rust/src/main.rs","byte_start":3853,"byte_end":3857,"line_start":145,"line_end":145,"column_start":43,"column_end":47,"is_primary":true,"text":[{"text":"    let (compile_txs_to_fit_into_a_block, fees) = compile_txs_and_fees_from_the_mempool(transactions);","highlight_start":43,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"rust/src/main.rs","byte_start":3853,"byte_end":3857,"line_start":145,"line_end":145,"column_start":43,"column_end":47,"is_primary":true,"text":[{"text":"    let (compile_txs_to_fit_into_a_block, fees) = compile_txs_and_fees_from_the_mempool(transactions);","highlight_start":43,"highlight_end":47}],"label":null,"suggested_replacement":"_fees","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `fees`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mrust/src/main.rs:145:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let (compile_txs_to_fit_into_a_block, fees) = compile_txs_and_fees_from_the_mempool(transactions);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_fees`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 2 previous errors; 6 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors; 6 warnings emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0425, E0433.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0425, E0433.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0425`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0425`.\u001b[0m\n"}
